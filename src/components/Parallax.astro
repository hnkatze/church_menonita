<div class="parallax-container js-parallax-section">
    <div class="layer layer-bg" data-speed="0.2">
      <img src="bg.jpg" alt="Fondo">
    </div>
    <div class="layer layer-mid flex items-center justify-center" data-speed="0.5">
      <h1 class="text-center text-7xl font-bold text-white uppercase">Iglesia Menonita</h1>
    </div>
    <div class="layer layer-front" data-speed="0.8">
      <img src="mountain.png" alt="Capa frontal">
    </div>
  </div>
  
  <div class="contenido">
    <h1>Mi Sitio con Parallax</h1>
    <p>Texto informativo que se desplaza sobre las capas de parallax.</p>
  </div>
  
<style>
  /* Contenedor Parallax: Sin overflow interno */
.parallax-container {
  height: 100vh; /* Usa 100vh (o el valor que necesites) */
  overflow: hidden; /* Evita scroll interno */
  perspective: 1px;
  position: relative;
}

.layer {
  position: absolute;
  width: 100%;
  height: 100%;
  transform-style: preserve-3d;
  will-change: transform;
}

/* Las transformaciones base pueden mantenerse si se quiere un efecto inicial,
   pero se actualizarán en el script. Puedes comentar estas líneas si prefieres solo el efecto dinámico.
.layer-bg { transform: translateZ(-5px) scale(6); }
.layer-mid { transform: translateZ(-3px) scale(4); }
.layer-front { transform: translateZ(-1px) scale(2); }
*/

.contenido {
  position: relative;
  background: white;
  z-index: 2;
  padding: 20px;
}

/* Asegurar que las imágenes cubran el contenedor */
.layer img {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

</style>
<script>
document.addEventListener('DOMContentLoaded', () => {
  const parallaxSections = document.querySelectorAll<HTMLDivElement>('.js-parallax-section');

  const updateParallax = (entries: IntersectionObserverEntry[]) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        const section = entry.target as HTMLElement;
        const bounds = section.getBoundingClientRect();
        // Calcula el progreso del scroll global respecto a la sección
        const scrollProgress = Math.min(1, Math.max(0, (window.innerHeight - bounds.top) / bounds.height));

        const layers = section.querySelectorAll<HTMLElement>('.layer');
        layers.forEach(layer => {
          const speed = parseFloat(layer.dataset.speed || '0.5');
          // Ajusta la cantidad de traslación según el progreso y la velocidad
          const translateY = scrollProgress * 100 * speed;
          // Actualiza la transformación aplicando translateY y reseteando translateZ (para evitar efectos residuales)
          layer.style.transform = `translateY(${translateY}px) translateZ(0)`;
        });
      }
    });
  };

  const observer = new IntersectionObserver(updateParallax, {
    threshold: [0, 1]
  });

  parallaxSections.forEach(section => observer.observe(section));
});

</script>